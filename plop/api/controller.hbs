'use strict';

import {{properCase name}} from './{{name}}.model';
import logger from '../../components/logger';
import _ from 'lodash';

/**
 * Get list of {{name}}s
 *
 * @param {Object} req the express request object
 * @param {Object} res the express response object
 */
export function index (req, res) {
  {{properCase name}}.find({})
    .then({{name}}s => {
      if (!{{name}}) {
        res.status(404).end();
      }
      else {
        res.status(200).json({{name}}s);
      }
    })
    .catch(err => {
      logger.error({
        err,
        req
      });

      res.status(500).end();
    });
}

/**
 * Creates a new {{name}}
 *
 * @param {Object} req the express request object
 * @param {Object} res the express response object
 */
export function create (req, res) {
  const new{{properCase name}} = new {{properCase name}}(req.body);

  new{{properCase name}}.save()
    .then({{name}} => {
      if (!{{name}}) {
        res.status(500).end();
      }
      else {
        res.status(201).json({{name}});
      }
    })
    .catch(err => {
      logger.error({
        err,
        req
      });
    });
}

/**
 *
 * Get a single {{name}}
 *
 * @param {Object} req the express request object
 * @param {Object} res the express response object
 */
export function show (req, res) {
  {{properCase name}}.findById(req.params.id)
    .then({{name}} => {
      if (!{{name}}) {
        res.status(404).end();
      }
      else {
        res.status(200).json({{name}}.profile);
      }
    })
    .catch(err => {
      logger.error({
        err,
        req
      });

      res.status(500).end();
    });
}

/**
 * Deletes a {{name}}
 *
 * @param {Object} req the express request object
 * @param {Object} res the express response object
 */
export function destroy (req, res) {
  {{properCase name}}.findOneAndRemove({_id: req.params.id})
    .then({{name}} => {
      if (!{{name}}) {
        res.status(404).end();
      }
      else {
        res.status(204).end();
      }
    })
    .catch(err => {
      logger.error({
        err,
        req
      });

      res.status(500).end();
    });
}

/**
*
* Update a {{name}}
*
* @param {Object} req the express request object
* @param {Object} res the express response object
*/
export function update (req, res) {
  const data = _.pick(req.body, ['name']);

  {{properCase name}}.findById(req.params.id)
    .then({{name}} => {
      if (!{{name}}) {
        return res.status(404).end();
      }

      {{name}}.set(data);

      return {{name}}.save();
    })
    .then(() => res.status(200).end())
    .catch(err => {
      logger.error({
        err,
        req
      });

      res.status(500).end();
    });
}
